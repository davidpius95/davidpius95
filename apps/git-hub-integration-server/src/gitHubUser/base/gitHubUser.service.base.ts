/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GitHubUser as PrismaGitHubUser } from "@prisma/client";

export class GitHubUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GitHubUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gitHubUser.count(args);
  }

  async gitHubUsers(
    args: Prisma.GitHubUserFindManyArgs
  ): Promise<PrismaGitHubUser[]> {
    return this.prisma.gitHubUser.findMany(args);
  }
  async gitHubUser(
    args: Prisma.GitHubUserFindUniqueArgs
  ): Promise<PrismaGitHubUser | null> {
    return this.prisma.gitHubUser.findUnique(args);
  }
  async createGitHubUser(
    args: Prisma.GitHubUserCreateArgs
  ): Promise<PrismaGitHubUser> {
    return this.prisma.gitHubUser.create(args);
  }
  async updateGitHubUser(
    args: Prisma.GitHubUserUpdateArgs
  ): Promise<PrismaGitHubUser> {
    return this.prisma.gitHubUser.update(args);
  }
  async deleteGitHubUser(
    args: Prisma.GitHubUserDeleteArgs
  ): Promise<PrismaGitHubUser> {
    return this.prisma.gitHubUser.delete(args);
  }
}
