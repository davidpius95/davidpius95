/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GitHubUserService } from "../gitHubUser.service";
import { GitHubUserCreateInput } from "./GitHubUserCreateInput";
import { GitHubUser } from "./GitHubUser";
import { GitHubUserFindManyArgs } from "./GitHubUserFindManyArgs";
import { GitHubUserWhereUniqueInput } from "./GitHubUserWhereUniqueInput";
import { GitHubUserUpdateInput } from "./GitHubUserUpdateInput";

export class GitHubUserControllerBase {
  constructor(protected readonly service: GitHubUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GitHubUser })
  async createGitHubUser(
    @common.Body() data: GitHubUserCreateInput
  ): Promise<GitHubUser> {
    return await this.service.createGitHubUser({
      data: data,
      select: {
        avatarUrl: true,
        createdAt: true,
        email: true,
        id: true,
        profileUrl: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GitHubUser] })
  @ApiNestedQuery(GitHubUserFindManyArgs)
  async gitHubUsers(@common.Req() request: Request): Promise<GitHubUser[]> {
    const args = plainToClass(GitHubUserFindManyArgs, request.query);
    return this.service.gitHubUsers({
      ...args,
      select: {
        avatarUrl: true,
        createdAt: true,
        email: true,
        id: true,
        profileUrl: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GitHubUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gitHubUser(
    @common.Param() params: GitHubUserWhereUniqueInput
  ): Promise<GitHubUser | null> {
    const result = await this.service.gitHubUser({
      where: params,
      select: {
        avatarUrl: true,
        createdAt: true,
        email: true,
        id: true,
        profileUrl: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GitHubUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGitHubUser(
    @common.Param() params: GitHubUserWhereUniqueInput,
    @common.Body() data: GitHubUserUpdateInput
  ): Promise<GitHubUser | null> {
    try {
      return await this.service.updateGitHubUser({
        where: params,
        data: data,
        select: {
          avatarUrl: true,
          createdAt: true,
          email: true,
          id: true,
          profileUrl: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GitHubUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGitHubUser(
    @common.Param() params: GitHubUserWhereUniqueInput
  ): Promise<GitHubUser | null> {
    try {
      return await this.service.deleteGitHubUser({
        where: params,
        select: {
          avatarUrl: true,
          createdAt: true,
          email: true,
          id: true,
          profileUrl: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
