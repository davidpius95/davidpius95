/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GitHubUser } from "./GitHubUser";
import { GitHubUserCountArgs } from "./GitHubUserCountArgs";
import { GitHubUserFindManyArgs } from "./GitHubUserFindManyArgs";
import { GitHubUserFindUniqueArgs } from "./GitHubUserFindUniqueArgs";
import { CreateGitHubUserArgs } from "./CreateGitHubUserArgs";
import { UpdateGitHubUserArgs } from "./UpdateGitHubUserArgs";
import { DeleteGitHubUserArgs } from "./DeleteGitHubUserArgs";
import { GitHubUserService } from "../gitHubUser.service";
@graphql.Resolver(() => GitHubUser)
export class GitHubUserResolverBase {
  constructor(protected readonly service: GitHubUserService) {}

  async _gitHubUsersMeta(
    @graphql.Args() args: GitHubUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GitHubUser])
  async gitHubUsers(
    @graphql.Args() args: GitHubUserFindManyArgs
  ): Promise<GitHubUser[]> {
    return this.service.gitHubUsers(args);
  }

  @graphql.Query(() => GitHubUser, { nullable: true })
  async gitHubUser(
    @graphql.Args() args: GitHubUserFindUniqueArgs
  ): Promise<GitHubUser | null> {
    const result = await this.service.gitHubUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GitHubUser)
  async createGitHubUser(
    @graphql.Args() args: CreateGitHubUserArgs
  ): Promise<GitHubUser> {
    return await this.service.createGitHubUser({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GitHubUser)
  async updateGitHubUser(
    @graphql.Args() args: UpdateGitHubUserArgs
  ): Promise<GitHubUser | null> {
    try {
      return await this.service.updateGitHubUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GitHubUser)
  async deleteGitHubUser(
    @graphql.Args() args: DeleteGitHubUserArgs
  ): Promise<GitHubUser | null> {
    try {
      return await this.service.deleteGitHubUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
