/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TechStack as PrismaTechStack,
  Issue as PrismaIssue,
} from "@prisma/client";

export class TechStackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TechStackCountArgs, "select">
  ): Promise<number> {
    return this.prisma.techStack.count(args);
  }

  async techStacks(
    args: Prisma.TechStackFindManyArgs
  ): Promise<PrismaTechStack[]> {
    return this.prisma.techStack.findMany(args);
  }
  async techStack(
    args: Prisma.TechStackFindUniqueArgs
  ): Promise<PrismaTechStack | null> {
    return this.prisma.techStack.findUnique(args);
  }
  async createTechStack(
    args: Prisma.TechStackCreateArgs
  ): Promise<PrismaTechStack> {
    return this.prisma.techStack.create(args);
  }
  async updateTechStack(
    args: Prisma.TechStackUpdateArgs
  ): Promise<PrismaTechStack> {
    return this.prisma.techStack.update(args);
  }
  async deleteTechStack(
    args: Prisma.TechStackDeleteArgs
  ): Promise<PrismaTechStack> {
    return this.prisma.techStack.delete(args);
  }

  async findIssues(
    parentId: string,
    args: Prisma.IssueFindManyArgs
  ): Promise<PrismaIssue[]> {
    return this.prisma.techStack
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .issues(args);
  }
}
