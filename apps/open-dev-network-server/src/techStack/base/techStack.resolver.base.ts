/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TechStack } from "./TechStack";
import { TechStackCountArgs } from "./TechStackCountArgs";
import { TechStackFindManyArgs } from "./TechStackFindManyArgs";
import { TechStackFindUniqueArgs } from "./TechStackFindUniqueArgs";
import { CreateTechStackArgs } from "./CreateTechStackArgs";
import { UpdateTechStackArgs } from "./UpdateTechStackArgs";
import { DeleteTechStackArgs } from "./DeleteTechStackArgs";
import { IssueFindManyArgs } from "../../issue/base/IssueFindManyArgs";
import { Issue } from "../../issue/base/Issue";
import { TechStackService } from "../techStack.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TechStack)
export class TechStackResolverBase {
  constructor(
    protected readonly service: TechStackService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "read",
    possession: "any",
  })
  async _techStacksMeta(
    @graphql.Args() args: TechStackCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TechStack])
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "read",
    possession: "any",
  })
  async techStacks(
    @graphql.Args() args: TechStackFindManyArgs
  ): Promise<TechStack[]> {
    return this.service.techStacks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TechStack, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "read",
    possession: "own",
  })
  async techStack(
    @graphql.Args() args: TechStackFindUniqueArgs
  ): Promise<TechStack | null> {
    const result = await this.service.techStack(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TechStack)
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "create",
    possession: "any",
  })
  async createTechStack(
    @graphql.Args() args: CreateTechStackArgs
  ): Promise<TechStack> {
    return await this.service.createTechStack({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TechStack)
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "update",
    possession: "any",
  })
  async updateTechStack(
    @graphql.Args() args: UpdateTechStackArgs
  ): Promise<TechStack | null> {
    try {
      return await this.service.updateTechStack({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TechStack)
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "delete",
    possession: "any",
  })
  async deleteTechStack(
    @graphql.Args() args: DeleteTechStackArgs
  ): Promise<TechStack | null> {
    try {
      return await this.service.deleteTechStack(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Issue], { name: "issues" })
  @nestAccessControl.UseRoles({
    resource: "Issue",
    action: "read",
    possession: "any",
  })
  async findIssues(
    @graphql.Parent() parent: TechStack,
    @graphql.Args() args: IssueFindManyArgs
  ): Promise<Issue[]> {
    const results = await this.service.findIssues(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
