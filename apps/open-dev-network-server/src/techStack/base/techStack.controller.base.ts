/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TechStackService } from "../techStack.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TechStackCreateInput } from "./TechStackCreateInput";
import { TechStack } from "./TechStack";
import { TechStackFindManyArgs } from "./TechStackFindManyArgs";
import { TechStackWhereUniqueInput } from "./TechStackWhereUniqueInput";
import { TechStackUpdateInput } from "./TechStackUpdateInput";
import { IssueFindManyArgs } from "../../issue/base/IssueFindManyArgs";
import { Issue } from "../../issue/base/Issue";
import { IssueWhereUniqueInput } from "../../issue/base/IssueWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TechStackControllerBase {
  constructor(
    protected readonly service: TechStackService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TechStack })
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: TechStackCreateInput,
  })
  async createTechStack(
    @common.Body() data: TechStackCreateInput
  ): Promise<TechStack> {
    return await this.service.createTechStack({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [TechStack] })
  @ApiNestedQuery(TechStackFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async techStacks(@common.Req() request: Request): Promise<TechStack[]> {
    const args = plainToClass(TechStackFindManyArgs, request.query);
    return this.service.techStacks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TechStack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async techStack(
    @common.Param() params: TechStackWhereUniqueInput
  ): Promise<TechStack | null> {
    const result = await this.service.techStack({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TechStack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: TechStackUpdateInput,
  })
  async updateTechStack(
    @common.Param() params: TechStackWhereUniqueInput,
    @common.Body() data: TechStackUpdateInput
  ): Promise<TechStack | null> {
    try {
      return await this.service.updateTechStack({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TechStack })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTechStack(
    @common.Param() params: TechStackWhereUniqueInput
  ): Promise<TechStack | null> {
    try {
      return await this.service.deleteTechStack({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/issues")
  @ApiNestedQuery(IssueFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Issue",
    action: "read",
    possession: "any",
  })
  async findIssues(
    @common.Req() request: Request,
    @common.Param() params: TechStackWhereUniqueInput
  ): Promise<Issue[]> {
    const query = plainToClass(IssueFindManyArgs, request.query);
    const results = await this.service.findIssues(params.id, {
      ...query,
      select: {
        category: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        techStack: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/issues")
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "update",
    possession: "any",
  })
  async connectIssues(
    @common.Param() params: TechStackWhereUniqueInput,
    @common.Body() body: IssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issues: {
        connect: body,
      },
    };
    await this.service.updateTechStack({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/issues")
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "update",
    possession: "any",
  })
  async updateIssues(
    @common.Param() params: TechStackWhereUniqueInput,
    @common.Body() body: IssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issues: {
        set: body,
      },
    };
    await this.service.updateTechStack({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/issues")
  @nestAccessControl.UseRoles({
    resource: "TechStack",
    action: "update",
    possession: "any",
  })
  async disconnectIssues(
    @common.Param() params: TechStackWhereUniqueInput,
    @common.Body() body: IssueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      issues: {
        disconnect: body,
      },
    };
    await this.service.updateTechStack({
      where: params,
      data,
      select: { id: true },
    });
  }
}
