/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserStatistic } from "./UserStatistic";
import { UserStatisticCountArgs } from "./UserStatisticCountArgs";
import { UserStatisticFindManyArgs } from "./UserStatisticFindManyArgs";
import { UserStatisticFindUniqueArgs } from "./UserStatisticFindUniqueArgs";
import { CreateUserStatisticArgs } from "./CreateUserStatisticArgs";
import { UpdateUserStatisticArgs } from "./UpdateUserStatisticArgs";
import { DeleteUserStatisticArgs } from "./DeleteUserStatisticArgs";
import { UserStatisticService } from "../userStatistic.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserStatistic)
export class UserStatisticResolverBase {
  constructor(
    protected readonly service: UserStatisticService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserStatistic",
    action: "read",
    possession: "any",
  })
  async _userStatisticsMeta(
    @graphql.Args() args: UserStatisticCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserStatistic])
  @nestAccessControl.UseRoles({
    resource: "UserStatistic",
    action: "read",
    possession: "any",
  })
  async userStatistics(
    @graphql.Args() args: UserStatisticFindManyArgs
  ): Promise<UserStatistic[]> {
    return this.service.userStatistics(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserStatistic, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserStatistic",
    action: "read",
    possession: "own",
  })
  async userStatistic(
    @graphql.Args() args: UserStatisticFindUniqueArgs
  ): Promise<UserStatistic | null> {
    const result = await this.service.userStatistic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserStatistic)
  @nestAccessControl.UseRoles({
    resource: "UserStatistic",
    action: "create",
    possession: "any",
  })
  async createUserStatistic(
    @graphql.Args() args: CreateUserStatisticArgs
  ): Promise<UserStatistic> {
    return await this.service.createUserStatistic({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserStatistic)
  @nestAccessControl.UseRoles({
    resource: "UserStatistic",
    action: "update",
    possession: "any",
  })
  async updateUserStatistic(
    @graphql.Args() args: UpdateUserStatisticArgs
  ): Promise<UserStatistic | null> {
    try {
      return await this.service.updateUserStatistic({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserStatistic)
  @nestAccessControl.UseRoles({
    resource: "UserStatistic",
    action: "delete",
    possession: "any",
  })
  async deleteUserStatistic(
    @graphql.Args() args: DeleteUserStatisticArgs
  ): Promise<UserStatistic | null> {
    try {
      return await this.service.deleteUserStatistic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
