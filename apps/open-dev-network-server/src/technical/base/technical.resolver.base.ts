/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Technical } from "./Technical";
import { TechnicalCountArgs } from "./TechnicalCountArgs";
import { TechnicalFindManyArgs } from "./TechnicalFindManyArgs";
import { TechnicalFindUniqueArgs } from "./TechnicalFindUniqueArgs";
import { DeleteTechnicalArgs } from "./DeleteTechnicalArgs";
import { TechnicalService } from "../technical.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Technical)
export class TechnicalResolverBase {
  constructor(
    protected readonly service: TechnicalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Technical",
    action: "read",
    possession: "any",
  })
  async _technicalsMeta(
    @graphql.Args() args: TechnicalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Technical])
  @nestAccessControl.UseRoles({
    resource: "Technical",
    action: "read",
    possession: "any",
  })
  async technicals(
    @graphql.Args() args: TechnicalFindManyArgs
  ): Promise<Technical[]> {
    return this.service.technicals(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Technical, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Technical",
    action: "read",
    possession: "own",
  })
  async technical(
    @graphql.Args() args: TechnicalFindUniqueArgs
  ): Promise<Technical | null> {
    const result = await this.service.technical(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Technical)
  @nestAccessControl.UseRoles({
    resource: "Technical",
    action: "delete",
    possession: "any",
  })
  async deleteTechnical(
    @graphql.Args() args: DeleteTechnicalArgs
  ): Promise<Technical | null> {
    try {
      return await this.service.deleteTechnical(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
