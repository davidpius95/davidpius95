/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserActivity } from "./UserActivity";
import { UserActivityCountArgs } from "./UserActivityCountArgs";
import { UserActivityFindManyArgs } from "./UserActivityFindManyArgs";
import { UserActivityFindUniqueArgs } from "./UserActivityFindUniqueArgs";
import { CreateUserActivityArgs } from "./CreateUserActivityArgs";
import { UpdateUserActivityArgs } from "./UpdateUserActivityArgs";
import { DeleteUserActivityArgs } from "./DeleteUserActivityArgs";
import { UserActivityService } from "../userActivity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserActivity)
export class UserActivityResolverBase {
  constructor(
    protected readonly service: UserActivityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserActivity",
    action: "read",
    possession: "any",
  })
  async _userActivitiesMeta(
    @graphql.Args() args: UserActivityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserActivity])
  @nestAccessControl.UseRoles({
    resource: "UserActivity",
    action: "read",
    possession: "any",
  })
  async userActivities(
    @graphql.Args() args: UserActivityFindManyArgs
  ): Promise<UserActivity[]> {
    return this.service.userActivities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserActivity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserActivity",
    action: "read",
    possession: "own",
  })
  async userActivity(
    @graphql.Args() args: UserActivityFindUniqueArgs
  ): Promise<UserActivity | null> {
    const result = await this.service.userActivity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserActivity)
  @nestAccessControl.UseRoles({
    resource: "UserActivity",
    action: "create",
    possession: "any",
  })
  async createUserActivity(
    @graphql.Args() args: CreateUserActivityArgs
  ): Promise<UserActivity> {
    return await this.service.createUserActivity({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserActivity)
  @nestAccessControl.UseRoles({
    resource: "UserActivity",
    action: "update",
    possession: "any",
  })
  async updateUserActivity(
    @graphql.Args() args: UpdateUserActivityArgs
  ): Promise<UserActivity | null> {
    try {
      return await this.service.updateUserActivity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserActivity)
  @nestAccessControl.UseRoles({
    resource: "UserActivity",
    action: "delete",
    possession: "any",
  })
  async deleteUserActivity(
    @graphql.Args() args: DeleteUserActivityArgs
  ): Promise<UserActivity | null> {
    try {
      return await this.service.deleteUserActivity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
