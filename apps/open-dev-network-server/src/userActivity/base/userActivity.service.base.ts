/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserActivity as PrismaUserActivity } from "@prisma/client";

export class UserActivityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserActivityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userActivity.count(args);
  }

  async userActivities(
    args: Prisma.UserActivityFindManyArgs
  ): Promise<PrismaUserActivity[]> {
    return this.prisma.userActivity.findMany(args);
  }
  async userActivity(
    args: Prisma.UserActivityFindUniqueArgs
  ): Promise<PrismaUserActivity | null> {
    return this.prisma.userActivity.findUnique(args);
  }
  async createUserActivity(
    args: Prisma.UserActivityCreateArgs
  ): Promise<PrismaUserActivity> {
    return this.prisma.userActivity.create(args);
  }
  async updateUserActivity(
    args: Prisma.UserActivityUpdateArgs
  ): Promise<PrismaUserActivity> {
    return this.prisma.userActivity.update(args);
  }
  async deleteUserActivity(
    args: Prisma.UserActivityDeleteArgs
  ): Promise<PrismaUserActivity> {
    return this.prisma.userActivity.delete(args);
  }
}
