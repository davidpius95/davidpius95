/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Technology as PrismaTechnology,
  Project as PrismaProject,
} from "@prisma/client";

export class TechnologyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TechnologyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.technology.count(args);
  }

  async technologies(
    args: Prisma.TechnologyFindManyArgs
  ): Promise<PrismaTechnology[]> {
    return this.prisma.technology.findMany(args);
  }
  async technology(
    args: Prisma.TechnologyFindUniqueArgs
  ): Promise<PrismaTechnology | null> {
    return this.prisma.technology.findUnique(args);
  }
  async createTechnology(
    args: Prisma.TechnologyCreateArgs
  ): Promise<PrismaTechnology> {
    return this.prisma.technology.create(args);
  }
  async updateTechnology(
    args: Prisma.TechnologyUpdateArgs
  ): Promise<PrismaTechnology> {
    return this.prisma.technology.update(args);
  }
  async deleteTechnology(
    args: Prisma.TechnologyDeleteArgs
  ): Promise<PrismaTechnology> {
    return this.prisma.technology.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.technology
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
