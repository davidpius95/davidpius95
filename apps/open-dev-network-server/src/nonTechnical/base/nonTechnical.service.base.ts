/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NonTechnical as PrismaNonTechnical } from "@prisma/client";

export class NonTechnicalServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NonTechnicalCountArgs, "select">
  ): Promise<number> {
    return this.prisma.nonTechnical.count(args);
  }

  async nonTechnicals(
    args: Prisma.NonTechnicalFindManyArgs
  ): Promise<PrismaNonTechnical[]> {
    return this.prisma.nonTechnical.findMany(args);
  }
  async nonTechnical(
    args: Prisma.NonTechnicalFindUniqueArgs
  ): Promise<PrismaNonTechnical | null> {
    return this.prisma.nonTechnical.findUnique(args);
  }
  async createNonTechnical(
    args: Prisma.NonTechnicalCreateArgs
  ): Promise<PrismaNonTechnical> {
    return this.prisma.nonTechnical.create(args);
  }
  async updateNonTechnical(
    args: Prisma.NonTechnicalUpdateArgs
  ): Promise<PrismaNonTechnical> {
    return this.prisma.nonTechnical.update(args);
  }
  async deleteNonTechnical(
    args: Prisma.NonTechnicalDeleteArgs
  ): Promise<PrismaNonTechnical> {
    return this.prisma.nonTechnical.delete(args);
  }
}
